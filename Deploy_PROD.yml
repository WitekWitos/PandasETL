# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
- stage: 'Deploy_DEV'
  dependsOn: []
   
  pool:
      Default
  jobs:
  - deployment: 'Deploy_DEV'
    environment: DEV

    strategy:                 
      runOnce:            
        deploy: 
          steps:       
          - script: |
              python -m pip install --upgrade pip
              python -m pip install --upgrade setuptools wheel pytest
              python -m pip install -r $(System.DefaultWorkingDirectory)\requirements.txt
            displayName: "Install dependencies"   
          - script: |
              python -m pytest tests
            displayName: "Run Unit Tests"
          - script: |
              python setup.py bdist_wheel
            displayName: "Make wheel"         
          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: PANDASETL_PACKAGE
            displayName: "Publish Package Artifact"
          - publish: $(System.DefaultWorkingDirectory)/notebooks
            artifact: PANDASETL_NOTEBOOKS
            displayName: "Publish Notebooks Artifact"

          - task: CopyFiles@2
            displayName: 'Deployement to DEV'
            inputs:
              SourceFolder: $(System.DefaultWorkingDirectory)
              TargetFolder: 'D:\Project\DEV'
              CleanTargetFolder: true

- stage: 'Deploy_TEST'
  dependsOn: []
   
  pool:
      Default
  jobs:
  - deployment: 'Deploy_TEST'
    environment: TEST

    strategy:                 
      runOnce:            
        deploy: 
          steps:       
          - script: |
              cd $(System.DefaultWorkingDirectory)
              dir

          - script: |
              python -m pip install --upgrade pip
              python -m pip install --upgrade setuptools wheel pytest
              python -m pip install -r $(System.DefaultWorkingDirectory)\requirements.txt
            displayName: "Install dependencies"
            
          - script: |
              python -m pytest tests
            displayName: "Run Unit Tests"

          - script: |
              python setup.py bdist_wheel
            displayName: "Make wheel"
          
          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: PANDASETL_PACKAGE
            displayName: "Publish Package Artifact"
          - publish: $(System.DefaultWorkingDirectory)/notebooks
            artifact: PANDASETL_NOTEBOOKS
            displayName: "Publish Notebooks Artifact"

          - task: CopyFiles@2
            displayName: 'Deployement to TEST'
            inputs:
              SourceFolder: $(System.DefaultWorkingDirectory)
              TargetFolder: 'D:\Project\TEST'
              CleanTargetFolder: true

- stage: 'Deploy_Prod'
  dependsOn: []   
  pool:
      Default
  jobs:

  - deployment: 'Deploy_Prod'
    environment: PROD
    

    strategy:
                     
      runOnce:           
        deploy: 
          steps:       
          - script: |
              cd $(System.DefaultWorkingDirectory)
              dir

          - script: |
              python -m pip install --upgrade pip
              python -m pip install --upgrade setuptools wheel pytest
              python -m pip install -r $(System.DefaultWorkingDirectory)\requirements.txt
            displayName: "Install dependencies"
            
          - script: |
              python -m pytest tests
            displayName: "Run Unit Tests"

          - script: |
              python setup.py bdist_wheel
            displayName: "Make wheel"
          
          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: PANDASETL_PACKAGE
            displayName: "Publish Package Artifact"
          - publish: $(System.DefaultWorkingDirectory)/notebooks
            artifact: PANDASETL_NOTEBOOKS
            displayName: "Publish Notebooks Artifact"

          - task: CopyFiles@2
            displayName: 'Deployement to PROD'
            inputs:
              SourceFolder: $(System.DefaultWorkingDirectory)
              TargetFolder: 'D:\Project\PROD'
              CleanTargetFolder: true





   
  
